{%- comment -%}
  Info: Should be always wrapped in .media container.

  Example:
    <div class="media media--3-4">
      {%- render 'image', image: media -%}
    </div>

    Or:

    <div class="media" style="padding-top:{%- render 'aspect-ratio', aspect_ratio: image.aspect_ratio -%}%;">
      {%- render 'image', image: media -%}
    </div>
{%- endcomment -%}

{%- liquid
  # required
  assign image = image | default: false

  # default widths
  assign widths_list = '760,880,920,1440,1800,2160,2880,3600,4320,5760'

  # if max_image_width is not set, use default image width according to max_image_url_width setting under performance
  assign page_width = 1440
  # 0.5: 720 - 1: 1440 - 1.5: 2160

  assign min_image_width = 64

  if settings.max_image_url_width == 'original'
    assign max_image_width = image.width
  else
    assign max_image_width = page_width | times: settings.max_image_url_width | floor | default: page_width

    # custom_max_image_width is used for custom image width for known full width areas
    if custom_max_image_width > max_image_width
      assign max_image_width = custom_max_image_width
    endif
  endif

  # there is a limit for image width
  if max_image_width > 5760
    assign max_image_width = 5760
  endif

  if settings.max_image_url_width == 'original'
   assign disable_image_widths_limitation = true
  else
    assign disable_image_widths_limitation = false
  endif

  # for mobile images
  assign image_for_mobile = image_for_mobile | default: false
  if image_for_mobile
    assign max_image_width = 480
  endif

  assign max_image_width = image_url_width | default: max_image_width

  # for grid blocks - like plp, carousels, etc.
  assign image_per_view = image_per_view | default: 1
  # echo '<!-- image_per_view:' | append: image_per_view | append: ' --->'
  assign max_image_width = max_image_width | divided_by: image_per_view | floor

  assign alt = alt | default: image.alt | default: '' | escape
  assign width = width | default: image.width
  assign height = height | default: image.height

  assign width = max_image_width | default: width
  # calculate height according to aspect ratio
  assign height = width | times: image.aspect_ratio | divided_by: 1 | floor

  assign widths = widths | default: 'auto'
  assign sizes = sizes | default: 'auto'

  assign class = class | default: ''
  assign attr = attr | default: nil

  assign loading = loading | default: 'lazy'

  # set default section_index value
  if section.location == 'header' or section.location == 'template'
    assign default_section_index = section.index | default: 3
  else
    assign default_section_index = 3
  endif

  assign section_index = section_index | default: default_section_index
  if section_index > 2
    assign loading = 'lazy'
  else
    assign loading = 'eager'
  endif

  assign media_index = media_index | default: 1

  # check difference with image_per_view and media_index
  assign media_index_checker = image_per_view | minus: media_index
  if media_index_checker < 0
    assign loading = 'lazy'
  endif

  # lazysizes params
  if settings.image_snippet != 'native'
    assign src = image | image_url: width: max_image_width
    capture image_position
      echo 'style="object-position: {{ image.presentation.focal_point }};"'
    endcapture

    assign loading = loading | default: 'lazy-animated'
  endif

  # this part is decreasing image quality for better performance
  unless disable_image_widths_limitation
    # recalculate widths_list according to max_image_width
    assign widths_list = widths_list | split: ','
    assign new_widths_list = ''
    for width in widths_list
      assign width_int = width | plus: 0
      if width_int <= max_image_width
        assign new_widths_list = new_widths_list | append: width | append: ','
      endif
    endfor
    assign new_widths_list = new_widths_list | remove_last: ','
    assign widths_list = new_widths_list
  endunless

  # generate srcset
  assign srcset = ''
  assign widths_array = widths_list | split: ','
  for width in widths_array
    assign width_int = width | plus: 0
    # echo '<!-- width_int:' | append: width_int | append: ' --->'
    assign srcset_url = image | image_url: width: width_int
    # echo '<!-- srcset_url:' | append: srcset_url | append: ' --->'
    assign srcset = srcset | append: srcset_url | append: ' ' | append: width | append: 'w,'
  endfor
  assign srcset = srcset | remove_last: ','

  # convert max_image_width from string to integer
  assign max_image_width = max_image_width | plus: 0

  assign widths = widths_list | default: 'auto'

	# generate sizes
	if sizes == 'auto'
		assign sizes_array = widths_list | split: ','
		assign sizes = ''
		for size in sizes_array
			assign size_int = size | plus: 0
			if size_int <= max_image_width
				assign sizes = sizes | append: size | append: ','
			endif
		endfor
		assign sizes = sizes | remove_last: ','

		# create a new array with sizes
		assign sizes_array = sizes | split: ','

		# create sizes like '(min-width: 1000px) 1000px, 100vw'
		assign new_sizes = ''
		for size in sizes_array
			assign size_int = size | plus: 0

      # for the first item
      if forloop.index == 1
        assign new_sizes = new_sizes | append: '(max-width: ' | append: size_int | append: 'px) 100vw, '
      else
        assign new_sizes = new_sizes | append: '(max-width: ' | append: size_int | append: 'px) ' | append: size_int | append: 'px, '
      endif

		endfor

		assign sizes = new_sizes | append: max_image_width | append: 'px'
  endif
  if max_image_width < 360
    assign min_image_width = max_image_width
  endif
-%}

{%- if settings.image_snippet == 'native' -%}
  {{
    image
    | image_url: width: min_image_width
    | image_tag:
      alt: alt,
      width: width,
      height: height,
      class: class,
      loading: loading,
      widths: widths,
      sizes: sizes,
      srcset: srcset
  }}
{%- else -%}
  <img
    {% if srcset %}data-srcset="{{ srcset }}"{% endif %}
    {% if sizes %}data-sizes="{{ sizes }}"{% endif %}
    data-src="{{ src }}"
    class="lazyload no-js-hidden {{ class }}"
    width="{{- width -}}"
    height="{{- height -}}"
    {% if alt %}alt="{{ alt }}"{% endif %}
    {% if attr %}{{ attr }}{% endif %}
    {% if loading %}loading="{{ loading }}"{% endif %}
    {{ image_position }}
  >
{%- endif -%}

